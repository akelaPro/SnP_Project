"""
Django settings for snpProject project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path
from decouple import config
import dj_database_url

import logging
logging.basicConfig(level=logging.DEBUG)

import boto3
boto3.set_stream_logger(name='botocore', level=logging.DEBUG)
#DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

AWS_ACCESS_KEY_ID = config('YANDEX_ID_CLOUD_SERVICE')  # Из JSON-ключа
AWS_SECRET_ACCESS_KEY = config('YANDEX_SECRET_KEY_CLOUD_SERVICE')
AWS_STORAGE_BUCKET_NAME = 'galerytest'
AWS_S3_ENDPOINT_URL = 'https://storage.yandexcloud.net'
AWS_S3_REGION_NAME = 'ru-central1'  # Или другой регион, если используете
AWS_DEFAULT_ACL = 'public-read'  # Для публичного доступа к файлам
AWS_QUERYSTRING_AUTH = False  # Отключаем подписанные URL (если не нужны)
AWS_LOCATION = ''


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'rest_framework',
    'djoser',
    'rest_framework.authtoken',
    'galery.apps.GaleryConfig',
    'channels',
    'channels_redis',
    'API.apps.ApiConfig',
    'notification.apps.NotificationConfig',
    'drf_spectacular',
    'service_objects',
    'social_django',
    'storages',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

]

ROOT_URLCONF = 'snpProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates',],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'snpProject.wsgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [os.environ.get('REDIS_URL', ('127.0.0.1', 6379))],
        },
    },
}


CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'


CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases




DATABASES = {
    'default': dj_database_url.config(default=config('DATABASE_URL'))
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
#'https://galerytest.storage.yandexcloud.net' '/media/'
MEDIA_URL = f'https://galerytest.storage.yandexcloud.net/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AUTH_USER_MODEL = 'galery.User'
#'/home/admin/Рабочий стол/SnP_Project/snpProject/media/avatars/default_avatr/default_avatar.png'
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DEFAULT_USER_IMAGE = MEDIA_URL + 'avatars/default_avatr/default_avatar.png'

DEFAULT_PHOTO_IMAGE = MEDIA_URL + 'images/default_image.jpg'

LOGIN_REDIRECT_URL = '/'  # Или конкретный путь, например '/home/'
LOGOUT_REDIRECT_URL = '/'


ASGI_APPLICATION = 'snpProject.asgi.application'

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],

    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'API.authentication.CustomTokenAuthentication',
    ],
    

}






AUTHENTICATION_BACKENDS = [
    'social_core.backends.github.GithubOAuth2',
    'django.contrib.auth.backends.ModelBackend',
    #'API.authentication.EmailAuthBackend',
]

SPECTACULAR_SETTINGS = {
    'TITLE': 'snpProject',
    'DESCRIPTION': 'Your project description',
    'VERSION': '1.0.0',  # Replace with your API version
    'SERVE_INCLUDE_SCHEMA': False, # disables schema view in production
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',  # Уровень логирования
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/drf.log'),  # Путь к файлу логов
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',  # Логирование в консоль
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'api': {  # Логгер для вашего приложения API
            'handlers': ['file'],
            'level': 'DEBUG',
        },
    },
}
EMAIL_ENABLED = config('EMAIL_ENABLED', default=True, cast=bool)
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
SITE_URL = config('SITE_URL', default='http://localhost:8000')

EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT')
EMAIL_HOST_USER = config('EMAIL')
EMAIL_HOST_PASSWORD = config('EMAIL_PASSWORD')
EMAIL_USE_SSL = True

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER
EMAIL_ADMIN = EMAIL_HOST_USER



SOCIAL_AUTH_GITHUB_SCOPE = ['user:email']
#SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/auth/github/callback/'
#SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/auth/github/callback/'
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'  # Перенаправлять на главную страницу
SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/'


SOCIAL_AUTH_GITHUB_SECRET = '08d01c6313d8c93355a28a7d5aa7c647cb26708e'
SOCIAL_AUTH_GITHUB_CALLBACK_URL = 'http://127.0.0.1:8000/auth/complete/github/'
SOCIAL_AUTH_GITHUB_KEY = 'Ov23liCCzAfGz8xbLCF2'


# Для работы с Daphne и ASGI
SOCIAL_AUTH_POSTGRES_JSONFIELD = True
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'API.social_auth_pipeline.get_or_create_user',  # Оставить только один вызов
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

SOCIAL_AUTH_URL_NAMESPACE = 'social'



CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SECURE = not DEBUG  # True в production
CSRF_COOKIE_SAMESITE = 'Lax'

SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG  # True в production
SESSION_COOKIE_SAMESITE = 'Lax'

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']


